const hre = require("hardhat");
const path = require('path');
const fs = require('fs');
const XLSX = require('xlsx');


async function main() {

  const filePath = path.resolve(__dirname, '../private/pentapets.csv');
  const results = [];

  const col = {
    'class_id_eth': 0,
    'Name_eth': 1,
    'Rarity_eth': 2,
    'Number of V1_eth': 3,
    'Fragments per V1_eth': 4,
    'class_id_pol': 6,
    'Name_pol': 7,
    'Rarity_pol': 8,
    'Number of V1_pol': 9,
    'Fragments per V1_pol': 10,
    'Name': 12,
    'Rarity': 13,
    'Total V1': 14,
    'User V2': 15,
    'Team v2': 16,
    'Max V2': 17,
    'Max ERC Tokens': 18,
    'NB V1 to get 1xV2': 19,
    'Fragments per V1': 20,
    'TOTAL FRAGMENTS': 22,
    'MAX NB OF V2': 23
  }

  const workbook = XLSX.readFile(filePath);

  const sheetName = workbook.SheetNames[0];

  // Get the sheet data
  const worksheet = workbook.Sheets[sheetName];
  const maxERC721Token = [
    75,
    75,
    75,
    75,
    75,
    75,
    75,
    75,
    75,
    75,
    75,
    75,
    75,
    75,
    75,
    75,
    38,
    75,
    38,
    15,
    // #N/A,
    150,
    75,
    38,
    150,
    150,
    150,
    150,
    150,
    150,
    150,
    150,
    150,
    150,
    150,
    150,
    150,
    75,
    75,
    75,
    75,
    75,
    75,
    75,
    75,
    75,
    75,
    75,
    75,
    75,
    15,
    150,
    150,
    150,
    150,
    150,
    150,
    150,
    150,
    150,
    150,
    150,
    150,
    75,
    75,
    75,
    75,
    15,
    150,
    150,
    150,
    150,
    150,
    150,
    150,
    150,
    150,
    150,
    150,
    150,
    150,
    150,
    150,
    150,
    150,
    150,
    150,
    150,
    38,
    15,
    15,
    15,
    15,
    15,
    15,
    150,
    150,
    150,
    75,
    75,
    75,
    75,
    75,
    75,
    150,
    75,
    75,
    75,
    150,
    150,
    150,
    150,
    150,
    150,
    150,
    38,
    38,
    38,
    38,
    38,
    38,
    38,
    38,
    38,
    38,
    38,
    38,
    38,
    38,
    38,
    75,
    75,
    75,
    38,
    38,
    38,
    38,
    38,
    38,
    75,
    75,
    38,
    38,
    38,
    38,
    75,
    75,
    38,
    38,
    38,
    75,
    75,
    15,
    15,
    15,
    75,
    75,
    38,
    38,
    38,
    38,
    38,
    75,
    75,
    38,
    38,
    38,
    38,
    38,
    38,
    38,
    38,
    38,
    38,
    38,
    38,
    38,
    38,
    38,
    38,
    38,
    38,
    38,
    38,
    38,
    38,
    38,
    38,
    38,
    38,
    38,
    38,
    38,
    // 0,
    38,
    38,
    38,
    38,
    38,
    15,
    15,
    38,
    // 0,
    // 0,
    // 0,
    // 15,
    // 15,
    // 15,
    // 75,
    // 75,
    // 75,
    // 15,
    // 15,
    // 15,
    // 15,
    // 15,
    // 15,
    // #N/A,
    // 0,
    // 0,
    38,
    38,
    38,
    38,
    38,
    38,
    // 150,
    150,
    75,
    75,
    75,
    75,
    75,
    75,
    // 150,
    150,
    38,
    38,
    38,
    2,
    38,
    15,
    15,
    // 15,
    38,
    38,
    38,
    38,
    // 38,
    38,
    38,
    38,
    38,
    15,
    15,
    15,
    75,
    75,
    75,
    15,
    15,
    15,
    15,
    15,
    15,
    150,
    150,
    150,
    38,
    15,
    38,
    38,
    15];
  const maxERC20Tokens = [];
  const classIdArr = [
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18,
    19,
    20,
    22,
    23,
    24,
    25,
    26,
    27,
    28,
    29,
    30,
    31,
    32,
    33,
    34,
    35,
    36,
    37,
    38,
    39,
    40,
    41,
    42,
    43,
    44,
    45,
    46,
    47,
    48,
    49,
    50,
    51,
    52,
    53,
    54,
    55,
    56,
    57,
    58,
    59,
    60,
    61,
    62,
    63,
    64,
    65,
    66,
    67,
    68,
    69,
    70,
    71,
    72,
    73,
    74,
    75,
    76,
    77,
    78,
    79,
    80,
    81,
    82,
    83,
    84,
    85,
    86,
    87,
    88,
    89,
    90,
    91,
    92,
    93,
    94,
    95,
    96,
    97,
    98,
    99,
    100,
    101,
    102,
    103,
    104,
    105,
    106,
    107,
    108,
    109,
    110,
    111,
    112,
    113,
    114,
    115,
    116,
    117,
    118,
    119,
    120,
    121,
    122,
    123,
    124,
    125,
    126,
    127,
    128,
    129,
    130,
    131,
    132,
    133,
    134,
    135,
    136,
    137,
    138,
    139,
    140,
    141,
    142,
    143,
    144,
    145,
    146,
    147,
    148,
    149,
    150,
    151,
    152,
    153,
    154,
    155,
    156,
    157,
    158,
    159,
    160,
    161,
    162,
    163,
    164,
    165,
    166,
    167,
    168,
    169,
    170,
    171,
    172,
    173,
    174,
    175,
    176,
    177,
    178,
    179,
    180,
    181,
    182,
    183,
    184,
    185,
    186,
    187,
    188,
    189,
    190,
    191,
    192,
    193,
    195,
    196,
    197,
    198,
    199,
    200,
    201,
    202,
    221,
    222,
    223,
    224,
    225,
    226,
    228,
    229,
    230,
    231,
    232,
    233,
    234,
    236,
    237,
    238,
    239,
    240,
    241,
    1242,
    1243,
    1245,
    1246,
    1247,
    1248,
    1249,
    1250,
    1252,
    1253,
    1206,
    1207,
    1208,
    1209,
    1210,
    1211,
    1212,
    1213,
    1214,
    1215,
    1216,
    1217,
    235,
    227,
    255,
    256,
    257,
    1254,
    1251,
    1244];
  const addresses = [];

  // Convert the sheet to JSON (optional, you can work with the raw data)
  const jsonData = XLSX.utils.sheet_to_json(worksheet);

  for (const result of jsonData) {
    const classId = Object.values(result)[0];
    const maxERC20 = Object.values(result)[16];
    const maxERC721 = Object.values(result)[15];

    const totalSupply = Object.values(result)[16];
    if (typeof (classId) == "number" && classId) {

      if (typeof (totalSupply) == 'number' && totalSupply) {
        if (typeof (maxERC721) == 'number' && maxERC721) {
          maxERC20Tokens.push(maxERC20)
          // maxERC721Token.push(maxERC721);
          // classIdArr.push(classId);
        }
      }
    }
    // console.log(result[key])
  }


  // console.log(`${classIdArr}, \n\n ${maxERC721Token}`)

  NFT_NAME = "PentaPets"
  NFT_SYMBOL = "PP"
  const erc20Frags = [
    "0xd9007376A54f1d07Ef418Caff98f115a515a760e",
    "0x7c91A1A732F2F023893F8c5f4fE7cCB75AbdC127",
    "0x8dF3454f18D851b5982Fd66619D814E8b033d1BD",
    "0x93a2b29E1049ce8052c266260C30df6421919c29",
    "0x534782989f29d6F7ef300910Dd52c55AB14ff534",
    "0xc874c5e55fDBC78C9dF494C284C779b04A1aD62c",
    "0xD42674A48C32Cdfc4b5078E9D2eF09Cd830C8749",
    "0x30947E86BF6fF1B0b82f9b89363A0C03c13e566e",
    "0x10D5d8EF027C7E7c0404A3B0a13Aa841Bd8BcDCC",
    "0x0833AAA905b8Ce1f25Eaa17B50F3D0E4E043F425",
    "0x7ff94c7819c19A5C6F7e81B8f82f93c584818e88",
    "0xc3254b3Dd59C3a63aCd1d19E6AA10c5DBa493627",
    "0xeeaB4176f5B5cdBC3013F3161234feC74F960eC1",
    "0xf91fd570EF3387687Ed9FF36e8ce3083070C9963",
    "0x5311DD4d222c4ed82c9933A061Be1338C0dA43cB",
    "0x2D312Ade5297CA442564e73350cB73768972A2eD",
    "0xc31674184900d87ffed14F384BeE4dEAa91daF21",
    "0xE34862182911d7E89365f8FdEe8eb79af32f2d6B",
    "0xE9ae507110582AAE6B1392413Ec56bfCC64A3Ba9",
    "0x298c8D6Bf91962f322aC8cdF8A2aC5641af04c3B",
    "0x7fB04D13740d0dAD6F7e3f297a59D4bA721ea4FD",
    "0x9c3e8B5Cfc7270CF026451D845c7E942e29143C8",
    "0xBaCa5317C82Fd4ecD7c6Fe1c81Da6C1B5819aad7",
    "0x949f33863c9CAe6FD7d974adD7d94792e12Ff0eA",
    "0xfcAa07a6Ceb3A315F9B5EE154915bA5963AfC47C",
    "0x21e0eB217701d9D392744DAb49981B0A7c55E895",
    "0x91476dA27975E8124843895C7417c9f8461d9b82",
    "0xEBF86fb4a6Eec6bCbAc8E6F885eC0B107af95047",
    "0xFA3d8d8c0cC0AE7c738C9FEC188A7a2d80b9f2A3",
    "0x8BC701BBF890C7c35f07e87C7cb13f635EBc9c7F",
    "0x502A3B8cddeC36bac00c3D3678fCF7E82648c868",
    "0x5B0c5A13Bdc9d0c36c29F60aB64F279A8CA34262",
    "0x8D319ec289De2BDAa031DC54d0089b5F984DC781",
    "0xe134C98b2A6f9f057F7081Cd597F0e6fDD291cca",
    "0x1B6Da92bA58AbE4aBc333FB74B378Bf825E7fDEF",
    "0xa273c4873bEbB14531240a60a674d81D05B3B783",
    "0xa3EfFB61fa83143294E139bd05179A580092Cef1",
    "0x70196084EB9f832021c308FE78Bcba5990566449",
    "0x783adEB5c86CabD431158EaFDf05f94bF2E99D2e",
    "0x8B9951c04e31872De2A6a9ce91364869c26119fB",
    "0x0383db008649F219Bd39c833Df0D0d6F7C9D9cc6",
    "0x44BcB3880af217aDf431dee67FcF48FF5aE3e98d",
    "0x9A126aE357B76E4905b67b1EfbEF247F5E7c680A",
    "0x44cD45fCB9de79Bc7D4D155cCb23b39A82f9A281",
    "0x841DE6510F6B8D825981438E22B9b85F666f471d",
    "0x65CEea4b0Ab05a759D1e45395d100722cacD3023",
    "0xbAb0F707294bCaF1650Af931c345f70F28485288",
    "0xC057E594d12d195287430e7219aD30E3310BB10e",
    "0xE894d02b1d8220Ac29d66ce41f53204B517a48C2",
    "0x521f214AaE8CeAC730A3d0CE6834f04CB4d5a196",
    "0x205B6ff8Ea43b3758Ef19bcac6545c59dBB18CA2",
    "0xfb0f592BA6632307ce8A1C7645a6E5267A9A41A4",
    "0x6d58ae031EF9fFac8a0040E44e01a872B1E8cd8c",
    "0x42Cc6D5a7602c4fb9BF65f1ae29e13c9c4f54e6f",
    "0x4BF4255b088155eE7a63873Cee6962e859D4eD4B",
    "0xD97e821C5326a9E21E79bAA2240F80ceC240b8B7",
    "0xbf729cAAA1793432739699F4e606dbb5AA5BCA97",
    "0xdfD4b33B0A91787034abDe6E7E222CA5a40a7f67",
    "0x5b9217FaB7Defb25B8Be1eF4967730a759Ea4240",
    "0xbDA8030023E5d5E251F2E9B9cf164C17e432C12a",
    "0x4f08F3b0226C8BE0c730EDbbB946B86bF21B2080",
    "0x22d72ecc14881c74b44217236362C267eECc8CFc",
    "0x72dB8E3118f296D765b8d1CCd6df1A634EEF4150",
    "0xe39895Bf31f8d2cf5e56fD3f4cE97495b9520AcC",
    "0xe4dbDD463a477aCb2441F6aC8f286718A0F15503",
    "0x2Ee784edE38059799E33Dec1434882ad636eAE22",
    "0xD5ab9f0E670Eaf2e408eae673c62E690dd9108f2",
    "0xE26C5fC29C7bCe11E72455E0Ba43030E794a20AA",
    "0x8212a1a9C025ABc89F4db4b198A200A93E0f0229",
    "0x9495ead88eC7592b8C01C65f8802A88EAb6bc2dc",
    "0x599aBAe474660473368447Ca2056a2F81A5Ebf7D",
    "0xBbCe10CF864aA7D0EAAd700Fdd1a155a7483960f",
    "0x8848FAad24DB81C005BeE304ef846F45aA3d817D",
    "0xaffA457c7e1A517E5c4196c6935457bA9559E50B",
    "0xd45716289726BFB02586De547fC778865Bfa51CC",
    "0x67748E767B7347Ddcb7C79BF3862E5F210068Dd5",
    "0x249425ebc7dc38bA04B9F50853C0D40f57c83f18",
    "0xECB6D301Bd9C742Fc15B3213Fcd29a92a4C76a63",
    "0x7196c861644A0DBf6Cd5318F979f4e52578e1Fa7",
    "0x964f943Fa9e7521fed539fB1Dc2AeD55764402B3",
    "0x6f4E1AE86E859B30A7b39bB6A86E18f106EaF3A3",
    "0x95370964DcDB4b45C5c15E5F9d8CdB0618dAF4B8",
    "0x9acFE926738814e0d27b29C7Ff34221304467310",
    "0x1B3339C5b1AE2354d9D71EE59C7EB5d35c25e560",
    "0xcC1D2c377D62E85eeed5aaB0a8dC3cd5be945aeE",
    "0x000EbB642c843BC1D1c7bBc2fEf294a4cA7b32Eb",
    "0x842F9f367a13FBD7618579e9d5Cb1d639829FE52",
    "0xA571D3fBCc2619b9f81733463406a9474458F257",
    "0x3C06C8C8Fc6ddA6307cE0C040C6C887Fb6E35eAa",
    "0x21cAc1Ff14fd16fCE4eA1703Aa38EEc94ff26086",
    "0xEd99bb25910C69562eD6E5c1B6498097BE610E2d",
    "0xA1FdA41993371Ac6FbA92B56F3af9540b605018F",
    "0x378F03626177d404eF0C2eCD79dBcc98856E0BD1",
    "0xb3Ae9B1892b5661661291d5a5AaC7E0274A0cd32",
    "0x8F9b38FE654FAB5F57CB96e17f9821AB960343C8",
    "0x6a7201969ED68e41493Fe68F87111fbA1aDb4d18",
    "0x9F9F988A70222C4EBcc4A9D316569BE201230C67",
    "0xdF7DE2665Bd7a660Ad23924240a8681bdafdb974",
    "0xCB1833CC5336d630D9cE8444e437F175E6d84d6b",
    "0x41d2e44b1df579a932A648269E0167995866bb4F",
    "0xBcb9b382785da150F336bAA271E9Ad4e500a322e",
    "0x4dc89D1644a56911Cf6B5C8223918B9a9672ddDf",
    "0x9eD0dA385166c2b7f8009021B686028B374502B5",
    "0x9Df4926490B9EBD5E14cC8EFd148d72fAD95996d",
    "0x3cA4C6e021c772C0AA70D636042f155fEF990eE0",
    "0x685a120fee8818a5BE2C90CCeF8db7f079F54771",
    "0x9a0677238A25d681bC7c95D4F780d29788ee1C3c",
    "0xe2ab05A6BffF968b7192bD6A023037762A425bcF",
    "0xF5a4d352F8350bF141d201F103217C2cD46be20F",
    "0x1d7Cbb9e569D9dEE180ee806ccD841BBD958cCff",
    "0x1B4E44B69359376EAe1bbEaa02709691c31c28b3",
    "0x2D3fFC51ce58AD873D3620A9e5d4af8765139C81",
    "0xe7a52401b7c32252fc9d580eF108f3FE1D6CC7aE",
    "0xEAE428F90612CBc8d3cDe1d9F67d9144d58DBBeA",
    "0x146205280A12838E5AdeEF3ABf92E5f125108287",
    "0xd9C291C9630d69Ae8158568128Fec130Ac6C3F99",
    "0x98DaC1eC5c140AF2162439A050Fb25c1269b1f3D",
    "0x95A220b0D79C6B1C0E483F87A560A6E9A506a534",
    "0x4DfdA7D64c7FC98dC67261a03b57CA7b15d88839",
    "0x37F79c3F3C268ff8f373Aa4514Ea9E693EE81557",
    "0x17ec42e078B5144317D69E7C92D780eD12013f24",
    "0xFCe8Fed00bd01Be5692584450f0c2689042A8567",
    "0x5C4619A5250bb6147BC9f572886905FE314f65F4",
    "0x9D73c597ee37A8CA61e7829DeD0E0DEF1593fce4",
    "0x2D231a3088B0a8Cf10FCC652bF88eb049A885362",
    "0x95F2083A78aF61A32324903A03e69c11c68442d2",
    "0x75712C53faE0fED9288045A6806481983EEBC773",
    "0xff96aeEf5A4e71D8Ca73C89C1ECD026309d4b0c7",
    "0x8b08546112a170F8aDB5E4d8aEAd354f6f519549",
    "0xA13A2767d5C69A34c7C2f099247deB56621E3dbC",
    "0xE89684435F443a8270ca33484EC89E3Afa8Ed810",
    "0xB9a13F290315598E8287475455c4dC43D2ac8C56",
    "0x7391fE3e5F2C19537516eBB2de604cA90CE5f6A9",
    "0x1b7cdAdaF69E3Ea7802E928efEe182D19F2111f5",
    "0x040918e21d6FdFc806ab4298C438342a1Ce92F54",
    "0xbcB40d1fbd1011a1aC7D0a9dFAD30b6317A1b10b",
    "0x1aB3C67e0d4663018927ECde05a6F64Da409dDc4",
    "0x1CCd0D677126AedC469C9294c7B89E85e46868f7",
    "0x1Aa60c7d364DC4f0d091fb0aA9E2ff25790bD16E",
    "0x60aCb2805167913377f8402a5Dd1CA0BC86C51ab",
    "0xBcc9aCc38a99e8e0E21622AFe006DCa7998380dC",
    "0xd5c3d2FD89fE4BD06918dbb3b50AC8aB5eEd4A62",
    "0x0D831a49f2c94BC5e3E909096F201A1405330e43",
    "0xF083E86C9f109F86186b6Ee880c9B22caEC75D18",
    "0x4F086ca473a0CE136D823b2273794D8113A8297b",
    "0x749384FE95A80A1917BD6EEA9Bb6708277C188F5",
    "0x9e847cC16C4d208a6e5aA0bD8b5501E8D89fffC0",
    "0x609Ebd599ED9a78FA6447963b7437F0cA27A147F",
    "0xEFB8882a77A144084CcE5093063824AEc2c66E6f",
    "0x237F24365fcaD5EEC4CEC3c8029E692aee7fa53A",
    "0x8a2C417C6450E998551B6c8C52DC5B496aECcD30",
    "0x3760706d3290BC1eaEe6A616dF6A0C404E47bFEa",
    "0x2B473A9fdE275A37e4b0932537a19AF1FB28531b",
    "0xB24C90Ea0Ca38B5Ec96584b8E68aF94CFA29129F",
    "0x574879Ca9d369f70ABa82cc90BFA0d603a05739A",
    "0x7870b1845c52B327f280c8Ec2AdC14aF7A8f13B3",
    "0x0bf8bc02e7ff896bf4Dff100F0F9F3c041100ddB",
    "0xE06341Fa5cC11620B6CDa35Fe0a7813fe217F70B",
    "0xb7368c4D37e26dC66fc40D228c6e7f876D6C12A6",
    "0xbb6c0eb394125A62d8aCFdE31f712e0a498d34d9",
    "0x3DBFfF9dA3Bb8df238eA2fb898ed0744FAe6fe66",
    "0x6839504346c65Bb1F16c2a1B776B0320AAc1eeEA",
    "0x97731456962589f4c81AeF1324702B9071A2c783",
    "0xe987a4123f97b8aE103BbcDd8efF678A581Fbc13",
    "0x4DF69dD976200Cae2Aa161a8727fCeAe8E96eAf2",
    "0x26b81388076Af024161dD2Bd507267c120d17a12",
    "0x65706c8E907422f81f8D2CdbC9FB06BB59b5bD5b",
    "0x4fA89557Af9efC0303B81D60EB4B54f0F70c006f",
    "0x4eb5Eb73abdd2e3AB48FeD6c6f23dA32E2d615eA",
    "0x4e794d46BD1BAeb1B43bB2C5190975109bD04433",
    "0xAE5AA21dfd96Cb92789Aa981bf8410f68F9F7123",
    "0x6f37FfeE8f0A846a1b5A6e1d9f2e0e71673C8318",
    "0x149d2D933a40acE5B6F810B9C9Ae8942eE325B71",
    "0x35F4dD12083C26eaC5fcC3fDAFA83e2adB0825Fd",
    "0x049ffc2Fa6Fe392c857F2317Fd7C46539eF1e887",
    "0x40766921952aadBCCa170221ba2B32b76dAaaC47",
    "0x5c16e7aC1b47Cb64EbB10c830F0609cE73d616A5",
    "0xa35B713b062C41979Da9FE5A55Da60041f14a1D8",
    "0xC2Ca0153a1183a352d8d54D97084fCB99B70505E",
    "0xA44fC2E8C5006715b6278653c121a1AA13e3Fa7f",
    "0x63d1A6586ADBE172195E7Ad57036B2CAA3195528",
    "0x1bAE0077De18e72E35Fcce83Eab2c26bEf98f0E2",
    "0x040a1Ec1AFcAD6A0f64Fd31301E4c538aD7e56eF",
    "0xaa5234b9c475212c15c36c3443de95c0819949c0",
    "0xc4617E47833eD79DE3Ce2ac36b9CDC70F2Dd87D7",
    "0x204110193B28fA8b5E0c206F4CE26bbB646B90f8",
    "0x93484353B2ff88Af70420aEbbeEb9d1dFA4bB226",
    "0x2E8832da6488179cB3dA38c6082Bb504D2E581C4",
    "0x46e6947F72F5641208a1b276eee20521284Fa30d",
    "0x452e0Ae74Df5E70c8B2fD5850346780A355Ebf82",
    "0x79ACA7076EeD61eD918f32479cF9e689491f4Edb",
    "0x56C02EA7df10893364CB186615eC1649f35738bB",
    "0x5F68b3b03495b6185D30Ee90Cae8AFe56c607482",
    "0x02cEbE53Da57129F8514A4b23a2d513A47903a72",
    "0xABEbEBbB3F85621602bDD8f2d6Fe833666d7522D",
    "0x90Bf3e350b6d0bffDB11Db56Ec67c90D89c2223b",
    "0x6145c5844b6A7bB7Af81F467462B0b2B8F3f5BD4",
    "0x46cc74B0292d0F1b38bFBB5d1C7E71d5CFD4FCD9",
    "0x524406f6E3DA25367a479ED57C4d5036eb10B002",
    "0x911a5A26111491577af5E748B9f722fC103367e8",
    "0x0AC1c66C6Eeea2a5CCfa5C21097A8073d57aaf3e",
    "0x9BB53CCafe9c06Fa7E280398c3884c29e70b1fDE",
    "0xC7f1891f76f0E59Ea5Bd47C6A5911812A2c4C35a",
    "0xCD56A932A1501bcFb50F26612bb4A4b9776a1A6d",
    "0x95669fe3C0926986b58e3F280A8467E78B521233",
    "0x0F8bB87B21e0f01eAaa03717EbaC9C841e5cc875",
    "0x80903C42Ec08F5c2f6A636455dC95714A31C0E2E",
    "0x67dEc0398EcE9e4fB9c29f832cD866283A51B4E0",
    "0x380547c7852348fB13A358c80dCF51e5811e9a72",
    "0x8A8C5710182B79A343089664E2F5bAD14b450318",
    "0xA01b6E0B0A9BaCA74a5D8AF04Bd088091533497a",
    "0x1DaAA1d7998Da4eeFbcf7e0B7300a0215DbfDcfA",
    "0x8EA219D9EB1277809920ED8F5286f21E75377104",
    "0x60B001f39388ad088CeB88e68A0BC5060A2BcEaF",
    "0xE561894215433d0ba1b92026Eda279B7659C4Cf3",
    "0xD02cDb3027a4c515EFB9C1ff2AaD94E5CAB8C7ec",
    "0x3E281ecc6D0A44cb785C315f45c2fabF0d59dd2C",
    "0x12bE75A7D1aE36c7689Bd21ABa7a0eeE0522432c",
    "0x137a7fb3401f3Ba3AEBF5a665Da909f7eE8Fb982",
    "0xF73FF00D8E43f8a8F266bB1c8AE7483C76480D2f",
    "0xB1e973F2848feb31185282ACB65D00B9Cb2fbCe8",
    "0x5d4056c6936f410Fad7e8eFe4252778ee1054dc9",
    "0x85641E2232793c7F788e03E7F8B4b1d8570f71D7",
    "0x03f3aB52dE8eDA51D144e9D38Cf3eEA20ED21A04",
    "0xE69efe6A530be483965a7D368c20b01Fd5417832",
    "0x1159688E88fB1BA5Ed81a2176A2C1eB7148B00D0",
    "0x2632f62910AC55Ba32c89e51DfF99e70a28f1cb2",
    "0x319c1f2820596F6355A1772D8910548eE517314F",
    "0x131d1D30A29fA56d6fC4A0cBdC4F5D6FA3B97942",
    "0x0CDA2332182a76c66eBdDc015d6BC2ab81549FBB",
    "0x0866EaaB8cAC6D3Ab4C4EeBB142D36B1119469e3",
    "0x2D93477b4493CF81d44889Ebd50D5A0e4953e1D5",
    "0xe1feA18A2DA7ad64Cf1C31B4239AFDB4B75C4111",
    "0xC2Ca00A69dd9077a9F0752feFc31cDDAA96Bf5cb",
    "0x8C3876a7fcf195FE58aA4cbf47c7d7a4454D9996",
    "0xC597D8D851275C6906969f1fF284d490d21bEc39",
    "0x28fca9AC417E63D7a2A873A98E02FD28303BE2eB",
    "0x6659eFa515f9273c9283104DFb0dafba5E89b718",
    "0xe871A57312D9262524D821f7ad2a939dEC725E08",
    "0xBab8F47B1B08212D46ABCedCF26888b8e2E2d3DA",
    "0xf09545997FDd94aD7fAfca9D20EA0A476aC317C2",
    "0x408eb543B8E41ECa9A9Af740772aFB9259B1c78f",
    "0x16e6226E416727432B5F68e219db39340Aa5C94d",
    "0x396d380b30F81C78Dfc7B335374a8011B57954aA",
    "0x6de826EF936A5AF092E9BadB14D0d520F3d3dA91",
    "0xD177f2C54711cfdb78BFE839AE9324a9CbE0d16b",
    "0x6D4b74c83A3d93F58669BfEdC61265df27f15069",
    "0x9BC967668B1A82C676c5c82A6E0e545C54aE9AFe",
    "0xA0D57B30E34631bdbb6695837073F156bFCfe3CE"
  ];
  for (let i = 0; i < maxERC721Token.length; i++) {
    console.log(erc20Frags[i], ' === ', classIdArr[i], ' ==== ', maxERC721Token[i])
  }

  const [addr1] = await hre.ethers.getSigners();
  const ppContract = await ethers.getContractFactory("PentaPets");
  this.ppContract = await ppContract.connect(addr1).deploy(NFT_NAME, NFT_SYMBOL, classIdArr, maxERC721Token);
  const ppDistributor = await ethers.getContractFactory("PentaPets_Distributor");
  this.ppDistributor = await ppDistributor.connect(addr1).deploy(this.ppContract.target, classIdArr, erc20Frags);
  const addModeratorTx = await this.ppContract.connect(addr1).AddModerator(this.ppDistributor.target);
  console.log("PentaPets deployed to:", this.ppContract.target);
  console.log("PentaPets_Distributor deployed to:", this.ppDistributor.target);

  await new Promise(r => setTimeout(r, 60000));

  await hre.run("verify:verify", {
    address: this.ppContract.target,
    constructorArguments: [NFT_NAME, NFT_SYMBOL, classIdArr, maxERC721Token],
    contract: `contracts/PentaPets/PentaPets.sol:PentaPets`
  });
  await hre.run("verify:verify", {
    address: this.ppDistributor.target,
    constructorArguments: [this.ppContract.target, classIdArr, erc20Frags],
    contract: `contracts/PentaPets/PentaPets_Distributor.sol:PentaPets_Distributor`
  });

}

main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});
